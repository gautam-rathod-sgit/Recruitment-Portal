@model RecruitmentPortal.WebApp.ViewModels.CandidateViewModel
@using RecruitmentPortal.WebApp.Resources


<section class="content">
    @using (Html.BeginForm("ApplyForm", "Home", FormMethod.Post, new { @id = "applyform", @enctype = "multipart/form-data" }))
    {
        
        <div class="row">
            <div class="col-sm-12">
                <div class="box box-default boxPad">
                    <div class="box-header">
                        <h3 class="box-title"><i class="fa fa-info-circle"></i><b> Apply here :</b></h3>
                        <div class="box-tools pull-right">
                            <input type="submit" value="Submit" class="btn btn-primary" name="submit" />
                            <a href='@Url.Action("Index", "Home")' class="btn btn-primary">Cancel</a>
                        </div>
                    </div>
                </div>

                <div class="box">
                    <div class="box-body">

                        @Html.HiddenFor(m => m.ID)
                        @Html.HiddenFor(m => m.jobpostID)
                        <div class="row">

                            <div class="col-md-6">
                                <div class="col-lg-10 col-md-8">
                                    <div class="form-group has-feedback has-feedback-left">
                                        @Html.LabelFor(m => m.jobpostName, new { @class = "asterisk" })
                                        @Html.TextBoxFor(m => m.jobpostName, new { @placeholder = "Job Title", @class = "form-control", @readonly = "readonly" })
                                        @Html.ValidationMessageFor(m => m.jobpostName, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group has-feedback has-feedback-left">
                                        @Html.LabelFor(m => m.name, new { @class = "asterisk" })
                                        @Html.TextBoxFor(m => m.name, new { @placeholder = "Candidate Name", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.name, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="form-group has-feedback has-feedback-left">
                                        @Html.LabelFor(m => m.ssc_perc, new { @class = "asterisk" })
                                        @Html.TextBoxFor(m => m.ssc_perc, "{0:#.#}", new { @placeholder = "Eligibility criteria", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.ssc_perc, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Gender, new { @class = "asterisk" })
                                        <div>
                                            @Html.RadioButtonFor(m => m.Gender, "Male")
                                            @Html.Label("Male ")
                                            @Html.RadioButtonFor(m => m.Gender, "Female")
                                            @Html.Label("Female ")
                                            @Html.RadioButtonFor(m => m.Gender, "Other")
                                            @Html.Label("Other")
                                        </div>
                                        @Html.ValidationMessageFor(m => m.Gender, "", new { @class = "text-danger" })

                                    </div>
                                    <div class="form-group has-feedback ">
                                        @Html.LabelFor(m => m.applying_through, new { @class = "asterisk" })
                                        @Html.DropDownListFor(m => m.applying_through, new SelectList(ViewBag.ReferenceSelect, "Value", "Text"), Messages.PleaseSelect, new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(m => m.applying_through, "", new { @class = "text-danger" })

                                    </div>

                                    <div class="form-group has-feedback has-feedback-left degree_dept ">
                                        @Html.LabelFor(m => m.selectedDegree, new { @class = "asterisk" })
                                        @Html.DropDownListFor(m => m.selectedDegree, new SelectList(ViewBag.ListOfDegree, "ID", "degree_name"), Messages.PleaseSelect, new { @id = "getDepts", @class = "form-control select2" })
                                        @Html.ValidationMessageFor(m => m.selectedDegree, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="form-group has-feedback has-feedback-left department_div ">
                                        
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(m => m.File, new { @class = "asterisk" })
                                        @Html.TextBoxFor(m => m.File, new { @type = "file", @id = "resume", @placeholder = "Experience" })
                                        @Html.ValidationMessageFor(m => m.File, "", new { @class = "text-danger" })
                                        <div class="text-danger">Maximum allowed file size is <strong>10MB</strong>.</div>
                                        <div class="text-danger">Allowed Extensions for file size is <strong> .jpeg, .jpg, .png .doc .docx .pdf</strong>.</div>
                                    </div>
                                </div>

                            </div>


                            <div class="col-md-6">
                                <div class="col-lg-10 col-md-8">
                                    <div class="form-group has-feedback has-feedback-left">
                                        @Html.LabelFor(m => m.email, new { @class = "asterisk" })
                                        @Html.TextBoxFor(m => m.email, new { @placeholder = "Email", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.email, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group has-feedback has-feedback-left">
                                        @Html.LabelFor(m => m.phone, new { @class = "asterisk" })
                                        @Html.TextBoxFor(m => m.phone, "{0:#.#}", new { @placeholder = "Contact no.", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.phone, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.dob, new { @class = "asterisk" })
                                        @Html.TextBoxFor(m => m.dob, new { @type = "datetime", @placeholder = "Date of Birth", @class = "form-control datepicker" })
                                        @Html.ValidationMessageFor(model => model.dob, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group has-feedback has-feedback-left">
                                        @Html.LabelFor(m => m.hsc_perc, new { @class = "asterisk" })
                                        @Html.TextBoxFor(m => m.hsc_perc, "{0:#.#}", new { @placeholder = "Eligibility criteria", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.hsc_perc, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.experience, new { @class = "asterisk" })
                                        <div>
                                            @Html.RadioButtonFor(m => m.experience, "Fresher", new { @id = "fresher", @value = "Fresher" })
                                            @Html.Label(" Fresher ")
                                            @Html.RadioButtonFor(m => m.experience, "Experience", new { @id = "experienced", @value = "Experienced" })
                                            @Html.Label(" Experience")

                                        </div>
                                        @Html.ValidationMessageFor(model => model.experience, "", new { @class = "text-danger" })

                                    </div>
                                    <div class="form-group has-feedback has-feedback-left hiddenclass">
                                        @Html.LabelFor(m => m.total_experience, new { @class = "asterisk" })
                                        @Html.TextBoxFor(m => m.total_experience, new { @placeholder = "Total Experience", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.total_experience, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group has-feedback has-feedback-left hiddenclass">
                                        @Html.LabelFor(m => m.relevent_experience, new { @class = "asterisk" })
                                        @Html.TextBoxFor(m => m.relevent_experience, new { @placeholder = "Relevent Experience", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.relevent_experience, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group has-feedback has-feedback-left hiddenclass">
                                        @Html.LabelFor(m => m.current_ctc, new { @class = "asterisk" })
                                        @Html.TextBoxFor(m => m.current_ctc, new { @placeholder = "Current CTC", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.current_ctc, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group has-feedback has-feedback-left hiddenclass">
                                        @Html.LabelFor(m => m.expected_ctc, new { @class = "asterisk" })
                                        @Html.TextBoxFor(m => m.expected_ctc, new { @placeholder = "Expected CTC", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.expected_ctc, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group has-feedback has-feedback-left" id="noticePeriod">
                                        @Html.LabelFor(m => m.notice_period, new { @class = "asterisk" })
                                        @Html.DropDownListFor(m => m.notice_period, new SelectList(ViewBag.NoticePeriod, "Text", "Text"), Messages.PleaseSelect, new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(m => m.notice_period, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    }
</section>

<script type="text/javascript">

    $(document).ready(function () {
      
        var modelYear = ('@Model.dob').replace(' ', '-').split('-');
        var today = new Date();
        var currDate = today.getDate();
        var currMonth = today.getMonth();
        var currYear = today.getFullYear();
        var newDate = currDate + "/" + currMonth + "/" + currYear;

        $('.datepicker').datepicker({
            format: 'dd/mm/yyyy',
            endDate: '+0d',
            autoclose: true,
        });

        if (modelYear[2] == '0001') {
            $('.datepicker').val('');
        }

        $(".select2").select2();

        //for setting degree dropdown to starting index
        $("select#getDepts")[0].selectedIndex = 0;

        //for restricting resume files on certain conditions
        $('#resume').on('change', function (e) {
            $file = $("#resume");
            var $filePath = $.trim($file.val());
            var f = this.files[0];
                if (f.size > 10485760 || f.fileSize > 10485760) {
                    //show an alert to the user
                    notification("Error", '@Messages.MaxSize10MB', "error");
                //reset file upload control
                this.value = null;
                return;
        }
            var $ext = $filePath.split(".").pop().toLowerCase();
            var $allow = new Array("png", "jpg", "jpeg", "doc", "docx", "pdf");
            if ($.inArray($ext, $allow) == -1) {
                notification("Error", '@Messages.AllowFileExtension', "error");
                this.value = null;
                return;
            }
        });

        //for hiding all 4
        $(".hiddenclass").hide()
        $("#noticePeriod").hide();

        //for experienced stuff
        $("#experienced").click(function () {
            $(".hiddenclass").show();
            $("#noticePeriod").show();
        });

        $("#fresher").click(function () {
            $(".hiddenclass").hide();
            $("#noticePeriod").hide();
        });

        if (@Model.selectedDegree != 0) {
            $('#getDepts').val(@Model.selectedDegree).change();
        }

    });

     //for getting departments and dependent departments
    $('#getDepts').change(function () {
        var url = '@Url.Action("GetDept", "Home")';
        var ddlsource = $("#getDepts").val();
        $.getJSON(url, { Id: ddlsource }, function (data) {

            $('.department_div').show();
            if (data.length > 1) {
                var dept_drop = '';
                $('#selectDept').remove(); //for removing if already existing dropdown of previous record
                dept_drop += '<select id="selectDept" name="selectDept" class="form-control select2">';
                for (var i = 0; i < data.length; i++) {
                    dept_drop += '<option value="' + data[i].value + '">' + data[i].text + '</option>';
                }
                dept_drop += '</select>';
                $('.department_div').empty();
                $('.department_div').append(dept_drop);
            }
            else {
                $("#DeptID").val(0);
                $('.department_div').hide();
            }
        });
        setTimeout(function () {
            $('#selectDept').select2();
        if (@Model.selectDept != 0) {
            $('#selectDept').val(@Model.selectDept).change();
        }
        }, 1000);
    });

    $('#applyform').submit(function (e) {

        var department = $('.department_div');

        var msg = '<span id="ValidationMessage" class = "text-danger">Department is Required</span>';
        if ($('#selectDept').val() == 0) {
            $("#ValidationMessage").remove();
            department.append(msg);
            e.preventDefault();
            return false;
        } else {
            $("#ValidationMessage").remove();
        }
    });
</script>